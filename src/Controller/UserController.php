<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;

use Symfony\Component\HttpFoundation\File\Exception\FileException;

use App\Entity\User;
use App\Repository\UserRepository;
use App\Form\UserType;
use App\Form\UserEditType;


use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Validator\Constraints\Regex;


use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
class UserController extends AbstractController
{
    /**
     * @Route("/user", name="user")
     */
    public function index(UserRepository $repository): Response
    {
        $users = $this->getDoctrine()
                    ->getRepository(User::class)
                    ->findAll();
        return $this->render('user/index.html.twig', ['users' => $users]);
    }

    /**
    * @Route("/user/new-user", name="new-user")
    * @Method({"GET", "POST"})
    */
    public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder)
    {

        $user = new User();
        $form = $this->createForm(UserType::class, $user);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // 3) Encode the password (you could also do this via Doctrine listener)
            $password = $passwordEncoder->encodePassword($user, $user->getPlainPassword());
            $user->setPassword($password);

           // // 3.5) file
           // $file = $user->getBrochure();
           // $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

           // try {
             //   $file->move(
               //     $this->getParameter('brochures_directory'),
              //      $fileName
               // );
            //} catch (FileException $e) {
                // ... handle exception if something happens during file upload
          //  }

          //  $user->setBrochure($fileName);

            // 4) save the User!
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($user);
            $entityManager->flush();


            // ... do any other work - like sending them an email, etc
            // maybe set a "flash" success message for the user

            return $this->redirectToRoute('user');
        }


        return $this->render('user/new.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    

    /**
    * @Route("/user/{id}/edit-user", requirements={"id": "\d+"}, name="edit-user")
    * @Method({"GET", "POST"})
    */
    public function edit(Request $request, User $user): Response
    {
        
        $form = $this->createEditForm($user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($user);
            $entityManager->flush();

            $this->flashSuccess('action.update.success');

            return $this->redirectToRoute('user');
        }


    
        

        return $this->render('user/edit.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @param User $user
     * @return \Symfony\Component\Form\FormInterface
     */
    private function createEditForm(User $user)
    {
        return $this->createForm(
            UserEditType::class,
            $user,
            [
               // 'action' => $this->generateUrl('user_profile_edit', ['username' => $user->getUsername()]),
                'method' => 'POST',
            ]
        );
    }






    /**
    * @Route("user/{id}/delete", requirements={"id": "\d+"}, name="delete")
    * @Method({"GET"})
    */
    public function delete(Request $request, User $user): Response
    {
        $em = $this->getDoctrine()->getManager();

        $em ->remove($user);
        $em ->flush();

        $this->addFlash('success', 'post deleted');

        return $this->redirectToRoute('user');
    }

    /**
    * @Route("user/{id}/show-user", requirements={"id": "\d+"}, name="show-user")
    * @Method("GET")
    */
    public function show(User $users): Response
    {
        return $this->render('user/show.html.twig', [
            'users' => $users,
        ]);
    }
}
